searchNodes=[{"doc":"This is BankApi module to financial concepts.","ref":"BankApi.html","title":"BankApi","type":"module"},{"doc":"","ref":"BankApi.html#hello/0","title":"BankApi.hello/0","type":"function"},{"doc":"Guardian error handling","ref":"BankApi.Auth.ErrorHandler.html","title":"BankApi.Auth.ErrorHandler","type":"module"},{"doc":"Return default error with code 401 an Unauthorized message","ref":"BankApi.Auth.ErrorHandler.html#auth_error/3","title":"BankApi.Auth.ErrorHandler.auth_error/3","type":"function"},{"doc":"Guardian methods to authentication","ref":"BankApi.Auth.Guardian.html","title":"BankApi.Auth.Guardian","type":"module"},{"doc":"Callback implementation for Guardian.after_encode_and_sign/4.","ref":"BankApi.Auth.Guardian.html#after_encode_and_sign/4","title":"BankApi.Auth.Guardian.after_encode_and_sign/4","type":"function"},{"doc":"Callback implementation for Guardian.after_sign_in/5.","ref":"BankApi.Auth.Guardian.html#after_sign_in/5","title":"BankApi.Auth.Guardian.after_sign_in/5","type":"function"},{"doc":"Authenticate user by email and password Check encrypted password and your database hash Create a new token and add to esponse","ref":"BankApi.Auth.Guardian.html#authenticate/2","title":"BankApi.Auth.Guardian.authenticate/2","type":"function"},{"doc":"Callback implementation for Guardian.before_sign_out/3.","ref":"BankApi.Auth.Guardian.html#before_sign_out/3","title":"BankApi.Auth.Guardian.before_sign_out/3","type":"function"},{"doc":"Callback implementation for Guardian.build_claims/3.","ref":"BankApi.Auth.Guardian.html#build_claims/3","title":"BankApi.Auth.Guardian.build_claims/3","type":"function"},{"doc":"Fetches the configuration for this module","ref":"BankApi.Auth.Guardian.html#config/0","title":"BankApi.Auth.Guardian.config/0","type":"function"},{"doc":"Returns a resolved value of the configuration found at a key. See Guardian.Config.resolve_value/1.","ref":"BankApi.Auth.Guardian.html#config/2","title":"BankApi.Auth.Guardian.config/2","type":"function"},{"doc":"Decodes and verifies a token using the configuration on the implementation module. See Guardian.decode_and_verify/4","ref":"BankApi.Auth.Guardian.html#decode_and_verify/3","title":"BankApi.Auth.Guardian.decode_and_verify/3","type":"function"},{"doc":"The default type of token for this module","ref":"BankApi.Auth.Guardian.html#default_token_type/0","title":"BankApi.Auth.Guardian.default_token_type/0","type":"function"},{"doc":"Encodes the claims. See Guardian.encode_and_sign/4 for more information","ref":"BankApi.Auth.Guardian.html#encode_and_sign/3","title":"BankApi.Auth.Guardian.encode_and_sign/3","type":"function"},{"doc":"Exchanges a token of one type for another. See Guardian.exchange for more information","ref":"BankApi.Auth.Guardian.html#exchange/4","title":"BankApi.Auth.Guardian.exchange/4","type":"function"},{"doc":"Get user from token","ref":"BankApi.Auth.Guardian.html#get_user_by_token/1","title":"BankApi.Auth.Guardian.get_user_by_token/1","type":"function"},{"doc":"Check if user is admin account","ref":"BankApi.Auth.Guardian.html#is_admin/1","title":"BankApi.Auth.Guardian.is_admin/1","type":"function"},{"doc":"Callback implementation for Guardian.on_exchange/3.","ref":"BankApi.Auth.Guardian.html#on_exchange/3","title":"BankApi.Auth.Guardian.on_exchange/3","type":"function"},{"doc":"Callback implementation for Guardian.on_refresh/3.","ref":"BankApi.Auth.Guardian.html#on_refresh/3","title":"BankApi.Auth.Guardian.on_refresh/3","type":"function"},{"doc":"Callback implementation for Guardian.on_revoke/3.","ref":"BankApi.Auth.Guardian.html#on_revoke/3","title":"BankApi.Auth.Guardian.on_revoke/3","type":"function"},{"doc":"Callback implementation for Guardian.on_verify/3.","ref":"BankApi.Auth.Guardian.html#on_verify/3","title":"BankApi.Auth.Guardian.on_verify/3","type":"function"},{"doc":"Provides the content of the token but without verification of either the claims or the signature. Claims will be present at the :claims key. See Guardian.peek/2 for more information","ref":"BankApi.Auth.Guardian.html#peek/1","title":"BankApi.Auth.Guardian.peek/1","type":"function"},{"doc":"Refresh a token. See Guardian.refresh for more information","ref":"BankApi.Auth.Guardian.html#refresh/2","title":"BankApi.Auth.Guardian.refresh/2","type":"function"},{"doc":"Here we&#39;ll look up our resource from the claims, the subject can be found in the &quot;sub&quot; key. In above subject_for_token/2 we returned the resource id so here we&#39;ll rely on that to look it up.","ref":"BankApi.Auth.Guardian.html#resource_from_claims/1","title":"BankApi.Auth.Guardian.resource_from_claims/1","type":"function"},{"doc":"Fetch the resource and claims directly from a token See Guardian.resource_from_token for more information","ref":"BankApi.Auth.Guardian.html#resource_from_token/3","title":"BankApi.Auth.Guardian.resource_from_token/3","type":"function"},{"doc":"Revoke a token. See Guardian.revoke for more information","ref":"BankApi.Auth.Guardian.html#revoke/2","title":"BankApi.Auth.Guardian.revoke/2","type":"function"},{"doc":"If Guardian.Plug.SlidingCookie is used, this callback will be invoked to return the new claims, or an error (which will mean the cookie will not be refreshed).","ref":"BankApi.Auth.Guardian.html#sliding_cookie/3","title":"BankApi.Auth.Guardian.sliding_cookie/3","type":"function"},{"doc":"sYou can use any value for the subject of your token but it should be useful in retrieving the resource later, see how it being used on resource_from_claims/1 function. A unique id is a good subject, a non-unique email address is a poor subject.","ref":"BankApi.Auth.Guardian.html#subject_for_token/2","title":"BankApi.Auth.Guardian.subject_for_token/2","type":"function"},{"doc":"Terminate user account and remove from database","ref":"BankApi.Auth.Guardian.html#terminate_account/1","title":"BankApi.Auth.Guardian.terminate_account/1","type":"function"},{"doc":"Validate password encrypted to database hash","ref":"BankApi.Auth.Guardian.html#validate_password/2","title":"BankApi.Auth.Guardian.validate_password/2","type":"function"},{"doc":"Callback implementation for Guardian.verify_claims/2.","ref":"BankApi.Auth.Guardian.html#verify_claims/2","title":"BankApi.Auth.Guardian.verify_claims/2","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html","title":"BankApi.Auth.Guardian.Plug","type":"module"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#authenticated?/2","title":"BankApi.Auth.Guardian.Plug.authenticated?/2","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#clear_remember_me/2","title":"BankApi.Auth.Guardian.Plug.clear_remember_me/2","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#current_claims/2","title":"BankApi.Auth.Guardian.Plug.current_claims/2","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#current_resource/2","title":"BankApi.Auth.Guardian.Plug.current_resource/2","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#current_token/2","title":"BankApi.Auth.Guardian.Plug.current_token/2","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#implementation/0","title":"BankApi.Auth.Guardian.Plug.implementation/0","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#put_current_claims/3","title":"BankApi.Auth.Guardian.Plug.put_current_claims/3","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#put_current_resource/3","title":"BankApi.Auth.Guardian.Plug.put_current_resource/3","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#put_current_token/3","title":"BankApi.Auth.Guardian.Plug.put_current_token/3","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#put_session_token/3","title":"BankApi.Auth.Guardian.Plug.put_session_token/3","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#remember_me/4","title":"BankApi.Auth.Guardian.Plug.remember_me/4","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#remember_me_from_token/4","title":"BankApi.Auth.Guardian.Plug.remember_me_from_token/4","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#sign_in/4","title":"BankApi.Auth.Guardian.Plug.sign_in/4","type":"function"},{"doc":"","ref":"BankApi.Auth.Guardian.Plug.html#sign_out/2","title":"BankApi.Auth.Guardian.Plug.sign_out/2","type":"function"},{"doc":"Guardian pipelino to set multiple settings to plug.","ref":"BankApi.Auth.Pipeline.html","title":"BankApi.Auth.Pipeline","type":"module"},{"doc":"Callback implementation for Plug.call/2.","ref":"BankApi.Auth.Pipeline.html#call/2","title":"BankApi.Auth.Pipeline.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"BankApi.Auth.Pipeline.html#init/1","title":"BankApi.Auth.Pipeline.init/1","type":"function"},{"doc":"Utils functions to project","ref":"BankApi.CLI.Utils.html","title":"BankApi.CLI.Utils","type":"module"},{"doc":"Get cowboy port usin Mix.env and transform to integer iex&gt; alias BankApi.CLI.Utils iex&gt; Utils.cowboy_port(&quot;8000&quot;)","ref":"BankApi.CLI.Utils.html#cowboy_port/1","title":"BankApi.CLI.Utils.cowboy_port/1","type":"function"},{"doc":"User Controller context","ref":"BankApi.Controllers.Account.html","title":"BankApi.Controllers.Account","type":"module"},{"doc":"Callback implementation for Plug.call/2.","ref":"BankApi.Controllers.Account.html#call/2","title":"BankApi.Controllers.Account.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"BankApi.Controllers.Account.html#init/1","title":"BankApi.Controllers.Account.init/1","type":"function"},{"doc":"Auth Controller context","ref":"BankApi.Controllers.Auth.html","title":"BankApi.Controllers.Auth","type":"module"},{"doc":"Callback implementation for Plug.call/2.","ref":"BankApi.Controllers.Auth.html#call/2","title":"BankApi.Controllers.Auth.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"BankApi.Controllers.Auth.html#init/1","title":"BankApi.Controllers.Auth.init/1","type":"function"},{"doc":"Transaction Controller context","ref":"BankApi.Controllers.Transaction.html","title":"BankApi.Controllers.Transaction","type":"module"},{"doc":"Callback implementation for Plug.call/2.","ref":"BankApi.Controllers.Transaction.html#call/2","title":"BankApi.Controllers.Transaction.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"BankApi.Controllers.Transaction.html#init/1","title":"BankApi.Controllers.Transaction.init/1","type":"function"},{"doc":"User Controller context","ref":"BankApi.Controllers.User.html","title":"BankApi.Controllers.User","type":"module"},{"doc":"Callback implementation for Plug.call/2.","ref":"BankApi.Controllers.User.html#call/2","title":"BankApi.Controllers.User.call/2","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"BankApi.Controllers.User.html#init/1","title":"BankApi.Controllers.User.init/1","type":"function"},{"doc":"Provides helper functions","ref":"BankApi.Helpers.TranslateError.html","title":"BankApi.Helpers.TranslateError","type":"module"},{"doc":"Transform _changeset errors to pretty list","ref":"BankApi.Helpers.TranslateError.html#pretty_errors/1","title":"BankApi.Helpers.TranslateError.pretty_errors/1","type":"function"},{"doc":"Accounts model","ref":"BankApi.Models.Accounts.html","title":"BankApi.Models.Accounts","type":"module"},{"doc":"Update current account balance Examples iex&gt; alias BankApi.Models.Accounts","ref":"BankApi.Models.Accounts.html#update_balance/3","title":"BankApi.Models.Accounts.update_balance/3","type":"function"},{"doc":"Update transfer operation to user account Examples iex&gt; alias BankApi.Models.Accounts","ref":"BankApi.Models.Accounts.html#update_balance/5","title":"BankApi.Models.Accounts.update_balance/5","type":"function"},{"doc":"Transactions model","ref":"BankApi.Models.Transactions.html","title":"BankApi.Models.Transactions","type":"module"},{"doc":"Create transaction Examples iex&gt; alias BankApi.Models.Transactions iex&gt; Transactions.create_transaction( %{ &quot;value&quot; =&gt; 10.00, &quot;account_from&quot; =&gt; &quot;from@email.com&quot;, &quot;account_to&quot; =&gt; &quot;to@email.com&quot; } ) { :ok, %BankApi.Schemas.Transaction{} }","ref":"BankApi.Models.Transactions.html#create_transaction/1","title":"BankApi.Models.Transactions.create_transaction/1","type":"function"},{"doc":"List all transactions and total Examples iex&gt; alias BankApi.Models.Transactions iex&gt; %{&quot;filter&quot; =&gt; filter,&quot;type&quot; =&gt; type,&quot;period&quot; =&gt; period} = %{&quot;filter&quot; =&gt; &quot;&quot;,&quot;type&quot; =&gt; &quot;&quot;,&quot;period&quot; =&gt; &quot;&quot;} iex&gt; filter_transactions(filter, type, period) %{ &quot;total&quot; =&gt; #Decimal&lt;0.00&gt;, &quot;transactions&quot; =&gt; [%BankApi.Schemas.Transaction{}] }","ref":"BankApi.Models.Transactions.html#filter_transactions/3","title":"BankApi.Models.Transactions.filter_transactions/3","type":"function"},{"doc":"Get total transactions with list Examples iex&gt; alias BankApi.Models.Transactions iex&gt; Transactions.get_total_transactions([]) iex&gt; transaction = Transactions.get_total_transactions([ %BankApi.Schemas.Transaction{ account_from: &quot;1@gmail.com&quot;, account_to: &quot;1@gmail.com&quot;, id: 5, inserted_at: ~N[2020-04-22 02:21:49], type: &quot;withdrawal&quot;, updated_at: ~N[2020-04-22 02:21:49], value: &quot;10.00&quot; } ]) #Decimal&lt;10.00&gt;","ref":"BankApi.Models.Transactions.html#get_total_transactions/1","title":"BankApi.Models.Transactions.get_total_transactions/1","type":"function"},{"doc":"List all transactions Examples iex&gt; alias BankApi.Models.Transactions iex&gt; Transactions.list_transactions [ %BankApi.Schemas.Transaction{} ]","ref":"BankApi.Models.Transactions.html#list_transactions/1","title":"BankApi.Models.Transactions.list_transactions/1","type":"function"},{"doc":"Transactions actions","ref":"BankApi.Models.Transactions.Action.html","title":"BankApi.Models.Transactions.Action","type":"module"},{"doc":"Transfer money from user account to other user account Examples iex&gt; alias BankApi.Models.Transactions iex&gt; alias BankApi.Models.Users iex&gt; params = %{&quot;account&quot; =&gt; &quot;teste@email.com&quot;, &quot;value&quot; =&gt; 100.00} iex&gt; {:ok, user} = Users.get_by_email(account) iex&gt; params = conn.body_params |&gt; Map.put(&quot;user&quot;, user) iex&gt; Transactions.transfer(params) {:ok, %BankApi.Schemas.Account{}}","ref":"BankApi.Models.Transactions.Action.html#transfer/1","title":"BankApi.Models.Transactions.Action.transfer/1","type":"function"},{"doc":"Withdrawal money from user account Examples iex&gt; alias BankApi.Models.Transactions iex&gt; params = %{&quot;account&quot; =&gt; &quot;teste@email.com&quot;, &quot;value&quot; =&gt; 100.00} iex&gt; Transactions.withdrawal(params) {:ok, %BankApi.Schemas.Account{}}","ref":"BankApi.Models.Transactions.Action.html#withdrawal/1","title":"BankApi.Models.Transactions.Action.withdrawal/1","type":"function"},{"doc":"Users model","ref":"BankApi.Models.Users.html","title":"BankApi.Models.Users","type":"module"},{"doc":"Bind account to user Examples iex&gt; alias BankApi.Models.Users iex&gt; user = Users.get_user(id) iex&gt; account = Users.bind_account(user) %BankApi.Schemas.Account{}","ref":"BankApi.Models.Users.html#bind_account/1","title":"BankApi.Models.Users.bind_account/1","type":"function"},{"doc":"Create user Examples iex&gt; alias BankApi.Models.Users iex&gt; Users.create_user( %{ &quot;email&quot; =&gt; &quot;email@email.com&quot;, &quot;firstName&quot; =&gt; &quot;firstName&quot;, &quot;lastName&quot; =&gt; &quot;lastName&quot;, &quot;phone&quot; =&gt; &quot;00 0000 0000&quot;, &quot;password&quot; =&gt; &quot;123456&quot; } ) { :ok, %BankApi.Schemas.User{} }","ref":"BankApi.Models.Users.html#create_user/1","title":"BankApi.Models.Users.create_user/1","type":"function"},{"doc":"Delete user from user instance Examples iex&gt; alias BankApi.Models.Users iex&gt; user = Users.get_user(id) iex&gt; Users.delete_user(user) { :ok, %BankApi.Schemas.User{} }","ref":"BankApi.Models.Users.html#delete_user/1","title":"BankApi.Models.Users.delete_user/1","type":"function"},{"doc":"Get user from email Examples iex&gt; alias BankApi.Models.Users iex&gt; Users.get_by_email( &quot;email@email.com&quot; ) { :ok, %BankApi.Schemas.User{} }","ref":"BankApi.Models.Users.html#get_by_email/1","title":"BankApi.Models.Users.get_by_email/1","type":"function"},{"doc":"Get user from id Examples iex&gt; alias BankApi.Models.Users iex&gt; Users.create_user( %{ &quot;email&quot; =&gt; &quot;email@email.com&quot;, &quot;firstName&quot; =&gt; &quot;firstName&quot;, &quot;lastName&quot; =&gt; &quot;lastName&quot;, &quot;phone&quot; =&gt; &quot;00 0000 0000&quot;, &quot;password&quot; =&gt; &quot;123456&quot; } ) { :ok, %BankApi.Schemas.User{} }","ref":"BankApi.Models.Users.html#get_user/1","title":"BankApi.Models.Users.get_user/1","type":"function"},{"doc":"List all users Examples iex&gt; alias BankApi.Models.Users iex&gt; Users.list_users [ %BankApi.Schemas.User{} ]","ref":"BankApi.Models.Users.html#list_users/0","title":"BankApi.Models.Users.list_users/0","type":"function"},{"doc":"Update user from user instance Examples iex&gt; alias BankApi.Models.Users iex&gt; user = Users.get_user(id) iex&gt; Users.update_user( user, %{ &quot;email&quot; =&gt; &quot;new_email@email.com&quot;, &quot;firstName&quot; =&gt; &quot;New_firstName&quot;, &quot;lastName&quot; =&gt; &quot;New_lastName&quot;, &quot;phone&quot; =&gt; &quot;11 1111 1111&quot;, &quot;password&quot; =&gt; &quot;654321&quot; } ) { :ok, %BankApi.Schemas.User{} }","ref":"BankApi.Models.Users.html#update_user/2","title":"BankApi.Models.Users.update_user/2","type":"function"},{"doc":"","ref":"BankApi.Plugs.VerifyRequest.html","title":"BankApi.Plugs.VerifyRequest","type":"module"},{"doc":"BankApi router context","ref":"BankApi.Router.html","title":"BankApi.Router","type":"module"},{"doc":"Callback implementation for Plug.call/2.","ref":"BankApi.Router.html#call/2","title":"BankApi.Router.call/2","type":"function"},{"doc":"Render parser to request data from route","ref":"BankApi.Router.html#get_bearer_token/1","title":"BankApi.Router.get_bearer_token/1","type":"function"},{"doc":"Callback implementation for Plug.init/1.","ref":"BankApi.Router.html#init/1","title":"BankApi.Router.init/1","type":"function"},{"doc":"Render parser to request data from route","ref":"BankApi.Router.html#render_json/3","title":"BankApi.Router.render_json/3","type":"function"},{"doc":"Account scheme context","ref":"BankApi.Schemas.Account.html","title":"BankApi.Schemas.Account","type":"module"},{"doc":"Table schema","ref":"BankApi.Schemas.Account.html#__struct__/0","title":"BankApi.Schemas.Account.__struct__/0","type":"function"},{"doc":"Changeset implements Validate required fields","ref":"BankApi.Schemas.Account.html#changeset/2","title":"BankApi.Schemas.Account.changeset/2","type":"function"},{"doc":"Transaction scheme context","ref":"BankApi.Schemas.Transaction.html","title":"BankApi.Schemas.Transaction","type":"module"},{"doc":"Table schema","ref":"BankApi.Schemas.Transaction.html#__struct__/0","title":"BankApi.Schemas.Transaction.__struct__/0","type":"function"},{"doc":"Changeset implements Validate required fields","ref":"BankApi.Schemas.Transaction.html#changeset/2","title":"BankApi.Schemas.Transaction.changeset/2","type":"function"},{"doc":"User scheme context","ref":"BankApi.Schemas.User.html","title":"BankApi.Schemas.User","type":"module"},{"doc":"Table schema","ref":"BankApi.Schemas.User.html#__struct__/0","title":"BankApi.Schemas.User.__struct__/0","type":"function"},{"doc":"Changeset implements Validate required fields Validate email format Validate unique email Validate password length min 6 Create password hash","ref":"BankApi.Schemas.User.html#changeset/2","title":"BankApi.Schemas.User.changeset/2","type":"function"},{"doc":"","ref":"BankApi.Seed.Admin.html","title":"BankApi.Seed.Admin","type":"module"},{"doc":"","ref":"BankApi.Seed.Admin.html#add_admin/0","title":"BankApi.Seed.Admin.add_admin/0","type":"function"},{"doc":"","ref":"BankApi.Seed.Users.html","title":"BankApi.Seed.Users","type":"module"},{"doc":"","ref":"BankApi.Seed.Users.html#add_user/0","title":"BankApi.Seed.Users.add_user/0","type":"function"},{"doc":"","ref":"Mix.Tasks.Utils.Seed.html","title":"Mix.Tasks.Utils.Seed","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1.","ref":"Mix.Tasks.Utils.Seed.html#run/1","title":"Mix.Tasks.Utils.Seed.run/1","type":"function"},{"doc":"Error raised when a required field is missing.","ref":"BankApi.Plugs.VerifyRequest.IncompleteRequestError.html","title":"BankApi.Plugs.VerifyRequest.IncompleteRequestError","type":"exception"},{"doc":"BankApi This is a Stone Challenge, to propose financial logic API","ref":"readme.html","title":"BankApi","type":"extras"},{"doc":"Clone project shell script https://gitlab.com/marcio-elixir/bank-api.git cd bank-api Docker deploy shell script cd docker/dev docker volume create bank_data docker-compose up -d &amp;&amp; docker logs bank-api -f","ref":"readme.html#development","title":"BankApi - Development","type":"extras"},{"doc":"Heroku https://devcenter.heroku.com/articles/heroku-cli Login Account Inside project follow this commands shell script heroku login Create App shell script heroku create stone-bank-api --buildpack hashnuke/elixir Create PostgreSQL instance shell script heroku addons:create heroku-postgresql:hobby-dev Setup environment shell script heroku config:set MIX_ENV=prod Migrate database shell script heroku run &quot;MIX_ENV=prod POOL_SIZE=2 mix ecto.create&quot; heroku run &quot;MIX_ENV=prod POOL_SIZE=2 mix ecto.migrate&quot; heroku run &quot;MIX_ENV=prod POOL_SIZE=2 mix utils.seed&quot; Push project shell script git push heroku master","ref":"readme.html#production","title":"BankApi - Production","type":"extras"},{"doc":"Run Tests shell script docker exec -it bank-api mix test Run Coveralls shell script docker exec -it bank-api bash -c &quot;MIX_ENV=test mix coveralls.html&quot;","ref":"readme.html#tests-and-coveralls","title":"BankApi - Tests and Coveralls","type":"extras"},{"doc":"Import this file in Insomnia https://insomnia.rest/ shell script rest-tools/insomnia.json Import this file in Postman https://postman.io shell script rest-tools/postman.json API Docs Endpoint Development http://localhost:4000/api Endpoint Release http://localhost:4001/api Endpoint Production https://stone-bank-api.herokuapp.com/api Fallback route Default to all errors in routes NotFound Status 404 { &quot;message&quot;: &quot;Page not found&quot; } Mock data Admin { &quot;email&quot;: &quot;albusdumbledore@hogwarts.com&quot;, &quot;password&quot;: &quot;123123123&quot; } Users { &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;password&quot;: &quot;123123123&quot; } { &quot;email&quot;: &quot;harrypotter@hogwarts.com&quot;, &quot;password&quot;: &quot;123123123&quot; } Account GET /account/create Create a new user account Headers Content-Type: application/json Body { &quot;user&quot;: { &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;firstName&quot;: &quot;Hermione&quot;, &quot;lastName&quot;: &quot;Granger&quot;, &quot;phone&quot;: &quot;00 0000 0000&quot;, &quot;password&quot;: &quot;123123123&quot; } } Response Status 200 { &quot;message&quot;: &quot;Account created with success!&quot;, &quot;user&quot;: { &quot;id&quot;: 8, &quot;firstName&quot;: &quot;Hermione&quot;, &quot;lastName&quot;: &quot;Granger&quot;, &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;phone&quot;: &quot;00 0000 0000&quot;, &quot;accounts&quot;: { &quot;balance&quot;: &quot;1000.00&quot; }, &quot;acl&quot;: &quot;user&quot; } } Errors { &quot;errors&quot;: { &quot;email&quot;: [ &quot;can&#39;t be blank&quot; ], &quot;firstName&quot;: [ &quot;can&#39;t be blank&quot; ], &quot;lastName&quot;: [ &quot;can&#39;t be blank&quot; ], &quot;password&quot;: [ &quot;can&#39;t be blank&quot; ] } } GET /auth/login User login and get access token Headers Content-Type: application/json Response Status 200 { &quot;message&quot;: &quot;Login success!&quot;, &quot;token&quot;: &quot;eyJhbGciOiJIUzUxMiIsInR5cCI6Ik...&quot;, &quot;user&quot;: { &quot;id&quot;: 2, &quot;firstName&quot;: &quot;Hermione&quot;, &quot;lastName&quot;: &quot;Granger&quot;, &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;phone&quot;: &quot;00 0000 0000&quot;, &quot;accounts&quot;: null, &quot;acl&quot;: &quot;user&quot; } } Errors { &quot;errors&quot;: &quot;Invalid credentials&quot; } GET /account/index Show current account Headers Authorization: Bearer TOKEN Response Status 200 { &quot;message&quot;: &quot;Login success!&quot;, &quot;token&quot;: &quot;eyJhbGciOiJIUzUxMiIsInR5cCI6Ik...&quot;, &quot;user&quot;: { &quot;id&quot;: 2, &quot;firstName&quot;: &quot;Hermione&quot;, &quot;lastName&quot;: &quot;Granger&quot;, &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;phone&quot;: &quot;00 0000 0000&quot;, &quot;accounts&quot;: null, &quot;acl&quot;: &quot;user&quot; } } Errors { &quot;errors&quot;: &quot;Unauthorized&quot; } GET /account/withdrawal Withdrawal money from your account Headers Authorization: Bearer TOKEN Content-Type: application/json Password confirmation is false Body { &quot;value&quot;: &quot;10.00&quot;, &quot;password_confirm&quot;: false } Response Status 200 { &quot;message&quot;: &quot;Please check your transation&quot;, &quot;result&quot;: { &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;new_balance&quot;: &quot;980.00&quot;, &quot;old_balance&quot;: &quot;990.00&quot; } } Password confirmation is true Body { &quot;value&quot;: &quot;10.00&quot;, &quot;password_confirm&quot;: &quot;123123123&quot; } Response Status 200 { &quot;message&quot;: &quot;Successful withdrawal!&quot;, &quot;result&quot;: { &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;new_balance&quot;: &quot;980.00&quot; } } Errors Invalid Credentials { &quot;errors&quot;: &quot;Invalid credentials&quot; } Value be less than 0.00 { &quot;errors&quot;: &quot;Value cannot be less than 0.00&quot; } You don&#39;t have enough funds { &quot;errors&quot;: &quot;You don&#39;t have enough funds&quot; } GET /account/transfer Transfer money to other user account Headers Authorization: Bearer TOKEN Content-Type: application/json Password confirmation is false Body { &quot;account_to&quot;: &quot;harrypotter@hogwarts.com&quot;, &quot;value&quot;: &quot;10.00&quot;, &quot;password_confirm&quot;: false } Response Status 200 { &quot;message&quot;: &quot;Please check your transation&quot;, &quot;result&quot;: { &quot;from&quot;: { &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;new_balance&quot;: &quot;960.00&quot;, &quot;old_balance&quot;: &quot;970.00&quot; }, &quot;to&quot;: { &quot;email&quot;: &quot;harrypotter@hogwarts.com&quot;, &quot;new_balance&quot;: &quot;1020.00&quot;, &quot;old_balance&quot;: &quot;1010.00&quot; } } } Password confirmation is true Body { &quot;account_to&quot;: &quot;harrypotter@hogwarts.com&quot;, &quot;value&quot;: &quot;10.00&quot;, &quot;password_confirm&quot;: &quot;123123123&quot; } Response Status 200 { &quot;message&quot;: &quot;Successful withdrawal!&quot;, &quot;result&quot;: { &quot;email&quot;: &quot;hermione@hogwarts.com&quot;, &quot;new_balance&quot;: &quot;980.00&quot; } } Errors Invalid Credentials { &quot;errors&quot;: &quot;Invalid credentials&quot; } Value be less than 0.00 { &quot;errors&quot;: &quot;Value cannot be less than 0.00&quot; } You don&#39;t have enough funds { &quot;errors&quot;: &quot;You don&#39;t have enough funds&quot; } `GET /account/terminate User terminate account Headers Authorization: Bearer TOKEN Content-Type: application/json Response Status 200 { &quot;message&quot;: &quot;Your account has been terminated&quot; } Errors { &quot;errors&quot;: &quot;You need authenticated to this action&quot; } Dashboard `GET /transactions/report Show transactions reports Headers Authorization: Bearer ADMIN_TOKEN Content-Type: application/json filter daily, monthly, yearly, empty type withdrawal, transfer period day, month, year Body All transactions { &quot;filter&quot;: &quot;&quot;, &quot;type&quot;: &quot;&quot;, &quot;period&quot;: &quot;&quot; } Per transaction type { &quot;filter&quot;: &quot;&quot;, &quot;type&quot;: &quot;withdrawal&quot;, &quot;period&quot;: &quot;&quot; } Daily transactions { &quot;filter&quot;: &quot;daily&quot;, &quot;type&quot;: &quot;&quot;, &quot;period&quot;: &quot;01&quot; } Monthly transactions { &quot;filter&quot;: &quot;monthly&quot;, &quot;type&quot;: &quot;&quot;, &quot;period&quot;: &quot;04&quot; } Yearly transactions { &quot;filter&quot;: &quot;yearly&quot;, &quot;type&quot;: &quot;&quot;, &quot;period&quot;: &quot;2020&quot; } Response Status 200 { &quot;message&quot;: &quot;All transactions&quot;, &quot;result&quot;: { &quot;total&quot;: &quot;10.00&quot;, &quot;transactions&quot;: [ { &quot;account_from&quot;: &quot;hermione@hogwarts.com&quot;, &quot;account_to&quot;: &quot;hermione@hogwarts.com&quot;, &quot;value&quot;: &quot;10.00&quot;, &quot;inserted_at&quot;: &quot;2020-04-28T19:04:04&quot; } ] } } Errors { &quot;errors&quot;: &quot;You need authenticated to this action&quot; }","ref":"readme.html#api-tools","title":"BankApi - API Tools","type":"extras"}]